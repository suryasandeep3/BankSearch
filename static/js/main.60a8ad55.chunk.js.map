{"version":3,"sources":["constants.js","App.js","reportWebVitals.js","index.js"],"names":["options","label","value","defaultDropdownValue","App","props","onRowSelect","row","isSelected","key","state","dropDownValue","selected","JSON","parse","sessionStorage","getItem","keyIndex","indexOf","ifsc","slice","push","setItem","stringify","newSelection","onSelectAll","rows","i","length","results","Constants","fetchResponse","bind","console","log","this","setState","hits","loading","axios","get","then","res","data","selectRowProp","mode","onSelect","bgColor","class","className","style","backgroundColor","color","width","justifySelf","autosize","onChange","handleChange","defaultValue","striped","hover","search","pagination","version","selectRow","marginRight","dataField","isKey","dataAlign","tdStyle","whiteSpace","wordWrap","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60a8ad55.chunk.js","sourcesContent":["export const options = [\r\n    { label: \"Hyderabad\", value: \"HYDERABAD\" },\r\n    { label: \"Chennai\", value: \"CHENNAI\" },\r\n    { label: \"Bangalore\", value: \"BANGALORE\" },\r\n    { label: \"Delhi\", value: \"DELHI\" },\r\n    { label: \"Mumbai\", value: \"MUMBAI\" }\r\n];\r\n\r\nexport const defaultDropdownValue = { label: \"Hyderabad\", value: \"HYDERABAD\" };","import React from \"react\";\nimport Select from \"react-select\";\nimport axios from \"axios\";\nimport * as Constants from \"./constants\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport \"./styles.css\";\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      results: [],\n      dropDownValue: Constants.defaultDropdownValue,\n    };\n    this.fetchResponse = this.fetchResponse.bind(this);\n  }\n\n  onRowSelect = (row, isSelected) => {\n    const key = this.state.dropDownValue.label + \"Selected\";\n    let selected = JSON.parse(sessionStorage.getItem(key));\n    if (selected) {\n      const keyIndex = selected.indexOf(row.ifsc);\n      if (keyIndex >= 0) {\n        selected = [\n          ...selected.slice(0, keyIndex),\n          ...selected.slice(keyIndex + 1)\n        ];\n      } else {\n        selected.push(row.ifsc);\n      }\n      sessionStorage.setItem(key, JSON.stringify(selected));\n    } else {\n      let newSelection = [];\n      newSelection.push(row.ifsc);\n      sessionStorage.setItem(key, JSON.stringify(newSelection));\n    }\n  };\n\n  onSelectAll = (isSelected, rows) => {\n    for (let i = 0; i < rows.length; i++) {\n      this.onRowSelect(rows[i], isSelected);\n    }\n  };\n\n  handleChange(dropDownValue) {\n    console.log(dropDownValue.value);\n    this.setState({ dropDownValue: dropDownValue });\n    this.fetchResponse(dropDownValue);\n  }\n\n  fetchResponse(dropDownValue) {\n    let hits = sessionStorage.getItem(dropDownValue.label);\n    if (hits) {\n      this.setState({ results: JSON.parse(hits), loading: false });\n      console.log(\"session storage is called:\" + dropDownValue.label);\n    } else {\n      axios\n        .get(\n          \"https://vast-shore-74260.herokuapp.com/banks?city=\" +\n          dropDownValue.value\n        )\n        .then(res => {\n          this.setState({ results: res.data });\n          sessionStorage.setItem(dropDownValue.label, JSON.stringify(res.data));\n        });\n    }\n  }\n\n  componentDidMount() {\n    console.log(\"component did mount\");\n    this.fetchResponse({ label: \"Hyderabad\", value: \"HYDERABAD\" });\n  }\n\n  render() {\n    const { onRowSelect, onSelectAll } = this;\n    const { results, dropDownValue } = this.state;\n    const key = dropDownValue.label + \"Selected\";\n\n    const selectRowProp = {\n      mode: \"checkbox\",\n      onSelect: onRowSelect,\n      onSelectAll: onSelectAll,\n      selected: JSON.parse(sessionStorage.getItem(key)),\n      bgColor: \"green\"\n    };\n\n\n    return (\n      <div class=\"row\" className=\"hdr\" style={{}}>\n        <div class=\"col-sm-12 btn btn-info\" style={{ backgroundColor: '#ffc20e', color: 'black' }}>\n          <h1> Bank Search Application </h1>\n        </div>\n        <div style={{ width: '500px', justifySelf: 'center' }}>\n          <Select\n            options={Constants.options}\n            value={this.state.value}\n            autosize={true}\n            onChange={value => this.handleChange(value)}\n            defaultValue={Constants.defaultDropdownValue}\n          />\n        </div>\n        <BootstrapTable\n          data={results}\n          striped={true}\n          hover={true}\n          search\n          pagination\n          version=\"4\"\n          selectRow={selectRowProp}\n          style={{ marginRight: '100px' }}\n        >\n          <TableHeaderColumn dataField=\"ifsc\" isKey>\n            IFSC CODE\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"bank_id\"\n            dataAlign=\"center\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            BANK ID\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"branch\"\n            dataAlign=\"center\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            BRANCH\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"address\"\n            dataAlign=\"center\"\n            width=\"20%\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            ADDRESS\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"city\"\n            dataAlign=\"center\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            CITY\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"district\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            DISTRICT\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"state\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            STATE\n        </TableHeaderColumn>\n          <TableHeaderColumn\n            dataField=\"bank_name\"\n            tdStyle={{ whiteSpace: \"normal\", wordWrap: \"break-word\" }}\n          >\n            BANK_NAME\n        </TableHeaderColumn>\n        </BootstrapTable>\n      </div>\n    );\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table/dist/react-bootstrap-table.min.css\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}